# Declarations
islands = EnumSort([E, F, G, H, I])
position_of = Function([islands] -> [int])

# Constraints
Distinct([i:islands], position_of(i)) ::: (Permutation constraint: each island has a distinct position)
ForAll([i:islands], And(1 <= position_of(i), position_of(i) <= 5)) ::: (Position range constraint)
position_of(F) + 1 == position_of(H) ::: (1) F is adjacent to H and is on the north side of H
Or(position_of(I) == position_of(E) + 1, position_of(E) == position_of(I) + 1) ::: (2) I and E are adjacent
position_of(G) < position_of(F) ::: (3) G is somewhere in the north of F
Implies(position_of(I) < position_of(G), And(position_of(I) == 1, position_of(E) == 2, position_of(G) == 3, position_of(F) == 4, position_of(H) == 5)) ::: (4) If I is at a position north of G, then the order is I, E, G, F, H

# Verifications
is_deduced(position_of(F) + 1 == position_of(H), True) ::: (1) F is adjacent to H and is on the north side of H
is_deduced(Or(position_of(I) == position_of(E) + 1, position_of(E) == position_of(I) + 1), True) ::: (2) I and E are adjacent
is_deduced(position_of(G) < position_of(F), True) ::: (3) G is somewhere in the north of F
is_deduced(Implies(position_of(I) < position_of(G), position_of(I) == 1), True) ::: (4) I must be the northernmost island
is_deduced(Implies(position_of(I) < position_of(G), position_of(E) == 2), True) ::: (5) E must be the second northernmost island
is_deduced(Implies(position_of(I) < position_of(G), position_of(G) == 3), True) ::: (6) G must be the third northernmost island
is_deduced(Implies(position_of(I) < position_of(G), And(position_of(F) == 4, position_of(H) == 5)), True) ::: (7) F and H must be the southernmost islands, with F being north of H