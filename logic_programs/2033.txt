# Declarations
people = EnumSort([A, B, C, D, P])
seats = EnumSort([seatA, seatB, seatC, seatD, seatF])
seat_of = Function([people] -> [seats])

# Constraints
Distinct([p:people], seat_of(p)) ::: (Permutation constraint: each person sits in a distinct seat)
Implies(Or(seat_of(A) == seatC, seat_of(B) == seatC), seat_of(C) == seatB) ::: (1) If one of A or B sits in Block C, then C sits in Block B
Implies(seat_of(P) == seatC, seat_of(D) == seatF) ::: (2) If Peng sits in Block C, then D sits in Block F
seat_of(D) == seatB ::: (Hypothesis: Ding sits in Block B)

# Verifications
is_deduced(seat_of(D) == seatB, Not(seat_of(A) == seatC)) ::: (1) A is not sitting in Block C
is_deduced(seat_of(D) == seatB, seat_of(A) == seatA) ::: (2) A must be sitting in Block A