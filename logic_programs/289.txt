# Declarations
islands = EnumSort([E, F, G, H, I])
position_of = Function([islands] -> [int])
ForAll([p:islands], And(1 <= position_of(p), position_of(p) <= 5))

# Constraints
Distinct([p:islands], position_of(p)) ::: (Permutation constraint: each island has a distinct position)
position_of(G) == 1 ::: (G is the northernmost island)
position_of(F) + 1 == position_of(H) ::: (F is adjacent to H and is on the north side of H)
Or(position_of(I) == position_of(E) + 1, position_of(E) == position_of(I) + 1) ::: (I and E are adjacent)
position_of(G) < position_of(F) ::: (G is somewhere in the north of F)

# Verifications
is_deduced(position_of(F) + 1 == position_of(H), True) ::: (1) F is to the north of H
is_deduced(Or(position_of(I) == position_of(E) + 1, position_of(E) == position_of(I) + 1), True) ::: (2) I and E are adjacent
is_deduced(position_of(G) < position_of(F), True) ::: (3) G is the northernmost island
is_deduced(position_of(G) == 1, True) ::: (4) G is the first island
is_deduced(position_of(F) == 2, True) ::: (5) F is the second island
is_deduced(And(position_of(I) == 3, position_of(E) == 4), True) ::: (6) I and E are the third and fourth islands, respectively
is_deduced(position_of(H) == 5, True) ::: (7) H is the last island