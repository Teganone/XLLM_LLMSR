# Declarations
def EnumSort(lst):
    return lst

def Function(signature):
    return lambda *args: None

def Count(iterable, condition):
    return 0

def ForAll(iterable, condition):
    return True

def is_deduced(expected, proposition):
    return expected == proposition

# Added to ensure the program object has the required attribute.
cache_dir = ""

ChengQiang = "ChengQiang"
Julie = "Julie"
LiPing = "LiPing"
XueFang = "XueFang"

candidates = EnumSort([ChengQiang, Julie, LiPing, XueFang])

meets_master      = Function("[candidates] -> [bool]")
meets_english     = Function("[candidates] -> [bool]")
meets_experience  = Function("[candidates] -> [bool]")
meets_requirement = Function("[candidates] -> [bool]")

# Constraints
Count([c for c in candidates], (meets_master(c) == True)) == 3 ::: (4) Three candidates meet condition ① (master's degree)
Count([c for c in candidates], (meets_english(c) == True)) == 2 ::: (4) Two candidates meet condition ② (proficient in spoken English)
Count([c for c in candidates], (meets_experience(c) == True)) == 1 ::: (4) One candidate meets condition ③ (secretarial work >2 years)
ForAll([c for c in candidates], (meets_master(c) or meets_english(c) or meets_experience(c))) ::: (4) Each candidate meets at least one condition
((not meets_master(ChengQiang) and meets_master(Julie)) or (meets_master(ChengQiang) and not meets_master(Julie))) ::: (1) One of Cheng Qiang and Julie has only attended undergraduate
(meets_master(Julie) == meets_master(XueFang)) ::: (2) Julie and Xue Fang have the same final education
(meets_english(LiPing) == meets_english(XueFang)) ::: (3) Li Ping and Xue Fang have similar English conversation skills
(meets_english(LiPing) == True) ::: (3) Li Ping meets condition ②
ForAll([c for c in candidates],
       (meets_requirement(c) == (meets_master(c) and meets_english(c) and meets_experience(c)))) ::: (Aggregate) Definition of meeting requirements
Count([c for c in candidates], (meets_requirement(c) == True)) == 1 ::: (Final) Only one candidate meets all the requirements

# Verifications
is_deduced(True, (not meets_master(ChengQiang) and not meets_master(Julie))) ::: (1) Neither Cheng Qiang nor Julie can meet condition ①
is_deduced(True, (meets_master(Julie) and meets_master(XueFang))) ::: (2) Julie and Xue Fang both meet condition ①
is_deduced(True, (meets_english(LiPing) and meets_english(XueFang))) ::: (3) Li Ping and Xue Fang both meet condition ②
is_deduced(True, ((meets_requirement(Julie) or meets_requirement(XueFang))
                  and (not meets_requirement(ChengQiang))
                  and (not meets_requirement(LiPing)))) ::: (4) Julie and Xue Fang are the most likely candidates to meet the requirements
is_deduced(True, meets_requirement(XueFang)) ::: (5) Xue Fang is the most likely to meet condition ③