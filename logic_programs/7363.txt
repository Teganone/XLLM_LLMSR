# Declarations
persons = EnumSort([A_p, B_p, C_p, Ding_p, E_p, F_p])
blocks = EnumSort([A_b, B_b, C_b, D_b, F_b, no_block])
seat_of = Function([persons] -> [blocks])
is_seated = Function([persons] -> [bool])
pos = Function([blocks] -> [int])

# Constraints
Count([p:persons], is_seated(p) == True) == 5 ::: Exactly 5 persons are seated
ForAll([p:persons], is_seated(p) == (seat_of(p) != no_block)) ::: A person is seated if and only if they are assigned a block
ForAll([p:persons], (not is_seated(p)) == (seat_of(p) == no_block)) ::: If a person is not seated, they are assigned no_block
ForAll([p1:persons, p2:persons],
       Implies((p1 != p2) and (is_seated(p1) == True) and (is_seated(p2) == True),
               seat_of(p1) != seat_of(p2))) ::: No two seated persons share the same block
pos(A_b) == 1 ::: Position of Block A
pos(B_b) == 2 ::: Position of Block B
pos(C_b) == 3 ::: Position of Block C
pos(D_b) == 4 ::: Position of Block D
pos(F_b) == 5 ::: Position of Block F
pos(no_block) == 0 ::: Position for no_block
Implies((is_seated(A_p) and seat_of(A_p) == C_b) or (is_seated(B_p) and seat_of(B_p) == C_b),
        (is_seated(C_p) and seat_of(C_p) == B_b)) ::: (1) If one of A or B sits in Block C, then C sits in Block B
Implies(is_seated(E_p) and seat_of(E_p) == C_b,
        is_seated(Ding_p) and seat_of(Ding_p) == F_b) ::: (2) If E sits in Block C, then Ding sits in Block F
is_seated(Ding_p) and seat_of(Ding_p) == B_b ::: Given: Ding is sitting in Block B

# Verifications
is_deduced(is_seated(Ding_p) and seat_of(Ding_p) == B_b,
           is_seated(E_p) and seat_of(E_p) == C_b) ::: (1) E is sitting in Block C
is_deduced(is_seated(Ding_p) and seat_of(Ding_p) == B_b,
           (pos(seat_of(E_p)) - pos(seat_of(F_p)) == 1) or (pos(seat_of(F_p)) - pos(seat_of(E_p)) == 1)) ::: (2) E and F are sitting in adjacent seats
is_deduced(is_seated(Ding_p) and seat_of(Ding_p) == B_b,
           is_seated(F_p) and seat_of(F_p) == D_b) ::: (3) F is sitting in Block D

--------------------------------------------------

# Declarations
students = EnumSort([G, H, L, M, U, W, Z])
countries = EnumSort([UK, US])
goes_to = Function([students] -> [countries])

# Constraints
Implies(goes_to(G) == UK, goes_to(H) == US) ::: (1) If G goes to the UK, then H goes to the US
Implies(goes_to(L) == UK, And(goes_to(M) == US, goes_to(U) == US)) ::: (2) If L goes to the UK, both M and U go to the US
goes_to(W) != goes_to(Z) ::: (3) W and Z go to different countries
goes_to(U) != goes_to(G) ::: (4) U goes to a different country than G
Implies(goes_to(Z) == UK, goes_to(H) == UK) ::: (5) If Z goes to the UK, then H goes to the UK
goes_to(G) == US ::: G goes to the United States

# Verifications
is_deduced(goes_to(G) == US,
           Not(Implies(goes_to(G) == UK, goes_to(H) == US))) ::: (1) Condition (1) is not applicable
is_deduced(goes_to(G) == US,
           Not(Implies(goes_to(L) == UK, And(goes_to(M) == US, goes_to(U) == US)))) ::: (2) Condition (2) is also not applicable
is_deduced(goes_to(W) != goes_to(Z), False) ::: (3) Condition (3) does not provide any information about other students
is_deduced(And(goes_to(U) != goes_to(G), goes_to(G) == US),
           goes_to(U) == UK) ::: (4) U must go to the UK
is_deduced(goes_to(G) == US,
           Not(Implies(goes_to(Z) == UK, goes_to(H) == UK))) ::: (5) Condition (5) is not applicable

--------------------------------------------------

# Declarations
magicians = EnumSort([G, H, K, L, N, P, Q])
positions = EnumSort([front, middle, back, no_position])
teams = EnumSort([team1, team2, no_team])
team_of = Function([magicians] -> [teams])
position_of = Function([magicians] -> [positions])
is_playing = Function([magicians] -> [bool])

# Constraints
Count([m:magicians], is_playing(m) == True) == 6 ::: Choose 6 people to play
And(Count([m:magicians], team_of(m) == team1) == 3,
    Count([m:magicians], team_of(m) == team2) == 3) ::: Each team has exactly 3 magicians
And(Count([m:magicians], And(team_of(m) == team1, position_of(m) == front)) == 1,
    Count([m:magicians], And(team_of(m) == team1, position_of(m) == middle)) == 1,
    Count([m:magicians], And(team_of(m) == team1, position_of(m) == back)) == 1,
    Count([m:magicians], And(team_of(m) == team2, position_of(m) == front)) == 1,
    Count([m:magicians], And(team_of(m) == team2, position_of(m) == middle)) == 1,
    Count([m:magicians], And(team_of(m) == team2, position_of(m) == back)) == 1) ::: Each position in each team is occupied by exactly one magician
ForAll([m:magicians],
       is_playing(m) == And(team_of(m) != no_team, position_of(m) != no_position)) ::: A magician is playing if and only if they are assigned to a team and a position
ForAll([m:magicians],
       Not(is_playing(m)) == And(team_of(m) == no_team, position_of(m) == no_position)) ::: If a magician is not playing, they are assigned to no team and no position
And(Implies(is_playing(G), position_of(G) == front),
    Implies(is_playing(H), position_of(H) == front)) ::: (1) If G or H is arranged to play, they must be in the front
Implies(is_playing(K), position_of(K) == middle) ::: (2) If K is scheduled to play, he must be in the middle
Implies(is_playing(L), team_of(L) == team1) ::: (3) If L is scheduled to play, he must be on team 1
And(Implies(And(is_playing(P), is_playing(N)), team_of(P) != team_of(N)),
    Implies(And(is_playing(K), is_playing(N)), team_of(K) != team_of(N))) ::: (4) Neither P nor K can be in the same team as N
Implies(And(is_playing(P), is_playing(Q)), team_of(P) != team_of(Q)) ::: (5) P cannot be in the same team as Q
Implies(And(is_playing(H), team_of(H) == team2),
        And(is_playing(Q), team_of(Q) == team1, position_of(Q) == middle)) ::: (6) If H is in team 2, Q is in the middle of team 1

# Verifications
is_deduced(And(Implies(is_playing(G), position_of(G) == front),
               Implies(is_playing(H), position_of(H) == front),
               Implies(is_playing(L), team_of(L) == team1),
               is_playing(L), position_of(L) != front),
           Or(position_of(L) == middle, position_of(L) == back)) ::: (1) He must be in the middle or back
is_deduced(And(Implies(is_playing(K), position_of(K) == middle),
               is_playing(L), position_of(L) == middle),
           position_of(K) == back) ::: (2) K must be in the back
is_deduced(And(Implies(And(is_playing(P), is_playing(N)), team_of(P) != team_of(N)),
               Implies(And(is_playing(K), is_playing(N)), team_of(K) != team_of(N)),
               is_playing(K), position_of(K) == back),
           Not(position_of(P) == back)) ::: (3) P cannot be in the back
is_deduced(And(Implies(And(is_playing(P), is_playing(N)), team_of(P) != team_of(N)),
               Implies(And(is_playing(K), is_playing(N)), team_of(K) != team_of(N)),
               is_playing(K), position_of(K) == back,
               is_playing(P)),
           Or(position_of(P) == front, position_of(P) == middle)) ::: (4) P must be in the front or middle
is_deduced(Implies(And(is_playing(P), is_playing(Q)), team_of(P) != team_of(Q)),
           Implies(And(is_playing(P), is_playing(L)), team_of(P) != team_of(L))) ::: (5) P cannot be in the same team as L
is_deduced(And(Implies(And(is_playing(P), is_playing(N)), team_of(P) != team_of(N)),
               Implies(And(is_playing(K), is_playing(N)), team_of(K) != team_of(N)),
               is_playing(K), position_of(K) == back,
               is_playing(P),
               Implies(And(is_playing(P), is_playing(Q)), team_of(P) != team_of(Q)),
               team_of(L) == team_of(Q)),
           position_of(P) == front) ::: (6) P must be in the front
is_deduced(And(Implies(And(is_playing(H), team_of(H) == team2),
                        And(is_playing(Q), team_of(Q) == team1, position_of(Q) == middle)),
               is_playing(G), position_of(G) == front, team_of(G) == team1),
           team_of(H) == team2) ::: (7) H must be in team 2

--------------------------------------------------

# Declarations
porcelains = EnumSort([S, Y, M, Q, K, X])
position_of = Function([porcelains] -> [int])
ForAll([p:porcelains], And(1 <= position_of(p), position_of(p) <= 6))

# Constraints
Distinct([p:porcelains], position_of(p)) ::: Each porcelain has a distinct position
ForAll([p:porcelains], And(1 <= position_of(p), position_of(p) <= 6)) ::: Position range constraint
position_of(M) < position_of(X) ::: (1) M is older than X
Implies(position_of(Y) < position_of(M),
        And(position_of(Q) < position_of(K), position_of(Q) < position_of(X))) ::: (2) If Y is earlier than M, then Q is earlier than K and X
Implies(position_of(M) < position_of(Y),
        And(position_of(K) < position_of(Q), position_of(K) < position_of(X))) ::: (3) If M is earlier than Y, then K is earlier than Q and X
Or(position_of(S) < position_of(Y), position_of(S) < position_of(M)) ::: (4) S is either earlier than Y or earlier than M
Not(And(position_of(S) < position_of(Y), position_of(S) < position_of(M))) ::: (4) S cannot be earlier than both Y and M

# Verifications
is_deduced(position_of(Y) < position_of(M),
           And(position_of(Y) < position_of(M),
               position_of(Q) < position_of(K),
               position_of(Q) < position_of(X))) ::: (1) If Y is earlier than M, then Q is earlier than K and X
is_deduced(position_of(M) < position_of(Y),
           And(position_of(M) < position_of(Y),
               position_of(K) < position_of(Q),
               position_of(K) < position_of(X))) ::: (2) If M is earlier than Y, then K is earlier than Q and X
is_deduced(Or(position_of(S) < position_of(Y), position_of(S) < position_of(M)),
           Not(And(position_of(Y) < position_of(S), position_of(S) < position_of(M)))) ::: (3) S cannot be placed between Y and M